<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:vm="clr-namespace:Firma.ViewModels"
                    xmlns:vw="clr-namespace:Firma.Views"
                    >

    <!--tu bedziemy laczyc View z ViewModel zakladek-->
    <DataTemplate DataType="{x:Type vm:WszystkieTowaryViewModel}">
        <vw:WszystkieTowaryView/>
    </DataTemplate>
    
    <DataTemplate DataType="{x:Type vm:NowyTowarViewModel}">
        <vw:NowyTowarView/>
    </DataTemplate>
    
    <DataTemplate DataType="{x:Type vm:NowaFakturaViewModel}">
        <vw:NowaFakturaView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:WszystkieFakturyViewModel}">
        <vw:WszystkieFakturyView/>
    </DataTemplate>
    
    <DataTemplate DataType="{x:Type vm:NowyPracownikViewModel}">
        <vw:NowyPracownikView/>
    </DataTemplate>
    
    <DataTemplate DataType="{x:Type vm:WszyscyPracownicyViewModel}">
        <vw:WszyscyPracownicyView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:PrzyjecieViewModel}">
        <vw:PrzyjecieView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:WydanieViewModel}">
        <vw:WydanieView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vm:NowaWyplataViewModel}">
        <vw:NowaWyplataView/>
    </DataTemplate>
    <!--tu jest koniec laczenia View z ViewModel zakladek-->
    
    <Style x:Key="MainHCCStyle" TargetType="{x:Type HeaderedContentControl}">
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <!--<Border 
                    Background="LightBlue" 
                    BorderBrush="LightGray" 
                    BorderThickness="0" 
                    CornerRadius="5" 
                    Margin="4" 
                    Padding="4" 
                    SnapsToDevicePixels="True" 
                    >-->
                        <!--<TextBlock 
                        FontSize="14"
                        FontWeight="Bold"
                        Foreground="White" 
                        HorizontalAlignment="Center"  
                        Text="{TemplateBinding Content}" 
                         />-->
                    <!--</Border>-->
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <!-- 
                This template ensures that content of a HeaderedContentControl 
                fills the available vertical space. 
                -->
                <ControlTemplate TargetType="{x:Type HeaderedContentControl}">
                    <DockPanel>
                        <ContentPresenter 
                        DockPanel.Dock="Top"
                        ContentSource="Header" 
                        ContentTemplate="{TemplateBinding HeaderTemplate}" 
                        />
                        <ContentPresenter 
                        ContentSource="Content" 
                        ContentTemplate="{TemplateBinding ContentTemplate}" 
                        />
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--
    This style ensures that the borders in the main window are consistent.
    -->
    <Style x:Key="MainBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="WhiteSmoke" />
        <Setter Property="BorderBrush" Value="LightGray" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="5" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <!--
    This template explains how to render the list of commands on the left
    side in the main window (the 'Control Panel' area).
    -->
    <DataTemplate x:Key="CommandsTemplate">
        <ItemsControl IsTabStop="False" ItemsSource="{Binding}" Margin="6,2">
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <Button Content="{Binding DisplayName}" Command="{Binding Path=Command}" Margin="6" Padding="4" Background="LightPink" BorderThickness="0"/>
                    <!--<TextBlock Margin="2,6">
                        <Hyperlink Command="{Binding Path=Command}">
                            <TextBlock Text="{Binding Path=DisplayName}" />
                        </Hyperlink>
                    </TextBlock>-->
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </DataTemplate>

    <!-- 
    This template explains how to render 
    a tab item with a close button.
    -->
    <DataTemplate x:Key="ClosableTabItemTemplate">
        <DockPanel Width="120">
            <Button 
            Command="{Binding Path=CloseCommand}"
            Content="X"
            Cursor="Hand"
            DockPanel.Dock="Right"
            Focusable="False"
            FontFamily="Courier" 
            FontSize="9"
            FontWeight="Bold"  
            Margin="0,1,0,0"
            Padding="0"
            VerticalContentAlignment="Bottom"
            Width="16" Height="16" 
            />
            <ContentPresenter 
        Content="{Binding Path=DisplayName}" 
        VerticalAlignment="Center" 
        />
        </DockPanel>
    </DataTemplate>

    <!--
  This template explains how to render the 'Workspace' content area in the main window.
  -->
    <DataTemplate x:Key="WorkspacesTemplate">
        <TabControl 
      IsSynchronizedWithCurrentItem="True" 
      ItemsSource="{Binding}" 
      ItemTemplate="{StaticResource ClosableTabItemTemplate}"
      Margin="4"
      />
    </DataTemplate>

    
    
    <!--Tu robimy ciąg dalszy resources!-->
    <Style x:Key="BaseDatePicker" TargetType="{x:Type DatePicker}">
        <Setter Property="Width" Value="150"/>
        <Setter Property="Margin" Value="2 2 2 2"/>
    </Style>

    <Style x:Key="BlueDatePicker" BasedOn="{StaticResource BaseDatePicker}" TargetType="{x:Type DatePicker}">
        <Setter Property="Foreground" Value="Blue"/> 
    </Style>

    <Style x:Key="BaseExpander" TargetType="{x:Type Expander}">
        <Setter Property="BorderBrush" Value="Blue"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Foreground" Value="Blue"/>
    </Style>

    <Style x:Key="BaseButton" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="LightBlue"/>
        <Setter Property="Foreground" Value="Blue"/>
        <Setter Property="Margin" Value="2"/>
    </Style>

    <Style x:Key="DisenabledButton" BasedOn="{StaticResource BaseButton}" TargetType="{x:Type Button}">
        <Setter Property="IsEnabled" Value="False"/>
        <!--Zadziala, jesli mamy ustawione enabled na false-->
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="LightBlue"/>
                <Setter Property="BorderThickness" Value="1"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BaseComboBox" TargetType="{x:Type ComboBox}">
        <Setter Property="Margin" Value="2 2 2 2"/>
        <Setter Property="Background" Value="LightBlue"/>
        <Setter Property="Foreground" Value="Blue"/>
        <Setter Property="IsEditable" Value="True"/>
        <Setter Property="Width" Value="auto"/>
    </Style>

    <Style x:Key="BaseGrid" TargetType="{x:Type Grid}">
        <Setter Property="Background" Value="Azure"/>
    </Style>

    <Style x:Key="BaseLabel" TargetType="Label">
        <Setter Property="Foreground" Value="Blue"/>
        <Setter Property="Margin" Value="2"/>
    </Style>


</ResourceDictionary>